<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>maven.common</groupId>
<artifactId>parent-maven-pom</artifactId>
<packaging>pom</packaging>
<version>1.0.0</version>
<name>parent-maven-pom</name>
<properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<pmd.rules.url/>
<public.repository.url/>
<snapshots.repository.url/>
<releases.repository.url/>
</properties>
<!--
 It is common to use inheritance with aggregation. Only unncomment following lines and define which modules form the project.
-->
<!--

	<modules>
		<module>../my-module</module>
  	</modules>
	
-->
<build>
<!-- Definition of defacto directory structure -->
<directory>${project.basedir}/target</directory>
<outputDirectory>${project.build.directory}/classes</outputDirectory>
<finalName>${project.artifactId}-${project.version}</finalName>
<testOutputDirectory>${project.build.directory}/test-classes</testOutputDirectory>
<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
<testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>
<resources>
<resource>
<directory>${project.basedir}/src/main/resources</directory>
</resource>
</resources>
<testResources>
<testResource>
<directory>${project.basedir}/src/test/resources</directory>
</testResource>
</testResources>
<!--  Only compile with 1.6  -->
<plugins>
<plugin>
<artifactId>maven-compiler-plugin</artifactId>
<version>2.3.2</version>
<inherited>true</inherited>
<configuration>
<source>1.6</source>
<target>1.6</target>
</configuration>
</plugin>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-deploy-plugin</artifactId>
<inherited>true</inherited>
<version>2.5</version>
<configuration>
<updateReleaseInfo>true</updateReleaseInfo>
</configuration>
</plugin>
<plugin>
<groupId>org.codehaus.mojo</groupId>
<artifactId>versions-maven-plugin</artifactId>
<version>1.2</version>
</plugin>
</plugins>
</build>
<!--
 JUnit reporting for knowing exactly what happens when a test fails 
-->
<reporting>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-report-plugin</artifactId>
<version>2.7.2</version>
</plugin>
</plugins>
</reporting>
<!--
 Starting maven with -Psource-javadoc will create an archive (jar file) with source file and another one with javadocs.
-->
<profiles>
<profile>
<id>source-javadoc</id>
<build>
<plugins>
<plugin>
<inherited>true</inherited>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-source-plugin</artifactId>
<executions>
<execution>
<id>attach-sources</id>
<goals>
<goal>jar</goal>
</goals>
</execution>
</executions>
</plugin>
<plugin>
<inherited>true</inherited>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-javadoc-plugin</artifactId>
<version>2.7</version>
<executions>
<execution>
<id>attach-javadocs</id>
<goals>
<goal>jar</goal>
</goals>
</execution>
</executions>
</plugin>
</plugins>
</build>
</profile>
<!--
 Starting maven with -Pmetrics will create reports files. Cobertura, Checkstyle, PMD and Findbugs are expensive processes. For this reason a profile for metrics is created and run when required..
-->
<!--
 If you plan not to use Sonor these reports will never be generated.
-->
<profile>
<id>metrics</id>
<build>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-site-plugin</artifactId>
<version>3.0-beta-3</version>
<configuration>
<reportPlugins>
<!--  Cobertura Report  -->
<plugin>
<groupId>org.codehaus.mojo</groupId>
<artifactId>cobertura-maven-plugin</artifactId>
<version>2.4</version>
<configuration>
<formats>
<format>xml</format>
</formats>
</configuration>
</plugin>
<!--  Checkstyle Report  -->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-checkstyle-plugin</artifactId>
<version>2.5</version>
</plugin>
<!--  PMD Report -->
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-pmd-plugin</artifactId>
<version>2.5</version>
<configuration>
<!--  PMD  -->
<targetJdk>1.6</targetJdk>
<aggregate>true</aggregate>
<format>xml</format>
<rulesets>
<!--
 This value should be changed for your own. This value should point to classpath so can be stored in parent project.
-->
<ruleset>${pmd.rules.url}</ruleset>
</rulesets>
<!--  CPD  -->
<minimumTokens>50</minimumTokens>
<ignoreIdentifiers>true</ignoreIdentifiers>
</configuration>
</plugin>
<!--  FindBugs Report -->
<plugin>
<groupId>org.codehaus.mojo</groupId>
<artifactId>findbugs-maven-plugin</artifactId>
<version>2.3.1</version>
<configuration>
<effort>Max</effort>
<xmlOutput>true</xmlOutput>
</configuration>
</plugin>
</reportPlugins>
</configuration>
</plugin>
</plugins>
</build>
</profile>
</profiles>
<dependencies>
<!--
 Dependencies for testing jUnit for unit testing, hamcrest for assertions, mockito for mocks.
-->
<dependency>
<groupId>org.objenesis</groupId>
<artifactId>objenesis</artifactId>
<version>1.2</version>
</dependency>
<dependency>
<groupId>org.hamcrest</groupId>
<artifactId>hamcrest-all</artifactId>
<version>1.1</version>
</dependency>
<dependency>
<groupId>org.mockito</groupId>
<artifactId>mockito-core</artifactId>
<version>1.8.5</version>
</dependency>
<dependency>
<groupId>junit</groupId>
<artifactId>junit-dep</artifactId>
<version>4.8.2</version>
</dependency>
</dependencies>
<repositories>
<repository>
<id>central</id>
<name>Repository Public Group</name>
<layout>default</layout>
<url>${public.repository.url}</url>
<snapshots>
<enabled>false</enabled>
</snapshots>
</repository>
</repositories>
<distributionManagement>
<snapshotRepository>
<uniqueVersion>false</uniqueVersion>
<id>snapshots-repo</id>
<name>Maven repository for snapshots</name>
<url>${snapshots.repository.url}</url>
</snapshotRepository>
<repository>
<id>releases-repo</id>
<name>Maven repository for releases</name>
<url>${releases.repository.url}</url>
</repository>
</distributionManagement>
</project>
